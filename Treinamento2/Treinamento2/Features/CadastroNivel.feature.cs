// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Treinamento2.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Nivel")]
    public partial class CadastroNivelFeature : object, Xunit.IClassFixture<CadastroNivelFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Nivel"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CadastroNivel.feature"
#line hidden
        
        public CadastroNivelFeature(CadastroNivelFeature.FixtureData fixtureData, Treinamento2_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "CadastroNivel", "\tA fim de cadastrar a classificação de formulario\r\n\teu como administrador\r\n\tgosta" +
                    "ria de cadastrar uma classificação de formulário", ProgrammingLanguage.CSharp, new string[] {
                        "Nivel"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
 testRunner.Given("que eu esteja na tela de autenticação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Senha"});
            table6.AddRow(new string[] {
                        "admin@admin.com",
                        "Senha1234"});
#line 9
 testRunner.When("eu preencher os campos de usuário e senha", ((string)(null)), table6, "Quando ");
#line hidden
#line 12
 testRunner.And("clicar no botão de entrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 13
 testRunner.Then("a tela de formuários deverá ser apresentada", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Cadastro de classificação de formulario")]
        [Xunit.TraitAttribute("FeatureTitle", "CadastroNivel")]
        [Xunit.TraitAttribute("Description", "Cadastro de classificação de formulario")]
        [Xunit.InlineDataAttribute("1", "Teste 1", new string[0])]
        [Xunit.InlineDataAttribute("2", "Teste 2", new string[0])]
        [Xunit.InlineDataAttribute("3", "Teste 3", new string[0])]
        [Xunit.InlineDataAttribute("4", "Teste 4", new string[0])]
        [Xunit.InlineDataAttribute("5", "Teste 5", new string[0])]
        [Xunit.InlineDataAttribute("6", "Teste 6", new string[0])]
        public virtual void CadastroDeClassificacaoDeFormulario(string nivel, string nome, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Nivel", nivel);
            argumentsOfScenario.Add("Nome", nome);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastro de classificação de formulario", null, tagsOfScenario, argumentsOfScenario);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 16
 testRunner.Given("que eu esteja na tela de cadastro classificação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 17
 testRunner.And("clique em cadastrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Nivel 1",
                            "Nivel 2",
                            "Nivel 3",
                            "Nivel 4",
                            "Nivel 5",
                            "Nivel 6"});
                table7.AddRow(new string[] {
                            "Teste 1",
                            "Teste 2",
                            "Teste 3",
                            "Teste 4",
                            "Teste 5",
                            "Teste 6"});
#line 18
 testRunner.And("selecionar o nível <nivel>", ((string)(null)), table7, "E ");
#line hidden
#line 21
 testRunner.And(string.Format("preencher o campo nível \"{0}\"", nome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 22
 testRunner.And("clicar em adicionar nível", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 23
 testRunner.And("clicar em gravar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 24
 testRunner.Then("o sistema deverá exibir a mensagem \"Classificação cadastrada com sucesso.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CadastroNivelFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CadastroNivelFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
